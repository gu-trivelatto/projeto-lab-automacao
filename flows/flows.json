[
    {
        "id": "c0c87725f2b6a546",
        "type": "tab",
        "label": "user",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ff87b268efdbf78",
        "type": "tab",
        "label": "manager",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2fa5a786019761a6",
        "type": "mqtt-broker",
        "name": "Labsoftlot",
        "broker": "143.107.102.8",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "706a10271f819c51",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Polibras",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "68f25da057c68e6d",
        "type": "ui_tab",
        "name": "Polibras",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0d6348cd3c581ac5",
        "type": "ui_group",
        "name": "Cliente",
        "tab": "68f25da057c68e6d",
        "order": 2,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f68e84da2add074e",
        "type": "ui_group",
        "name": "Dados de Carregamento",
        "tab": "68f25da057c68e6d",
        "order": 3,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "57383ef85f904023",
        "type": "ui_group",
        "name": "Conta",
        "tab": "68f25da057c68e6d",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4151d7703cfd2b05",
        "type": "ui_tab",
        "name": "Polibras - Gerenciamento",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d9d99228efd78e53",
        "type": "ui_group",
        "name": "Informação Geral",
        "tab": "4151d7703cfd2b05",
        "order": 1,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "812c9f59fa48c699",
        "type": "ui_group",
        "name": "Receita",
        "tab": "4151d7703cfd2b05",
        "order": 2,
        "disp": true,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0a04b855efa1e24e",
        "type": "ui_group",
        "name": "Contas",
        "tab": "4151d7703cfd2b05",
        "order": 3,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b17c97df988fc2a7",
        "type": "ui_group",
        "name": "Preços",
        "tab": "4151d7703cfd2b05",
        "order": 5,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7eb4ad1bb9f8ef34",
        "type": "ui_group",
        "name": "Novos preços",
        "tab": "4151d7703cfd2b05",
        "order": 6,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "52bbcde4b86dc022",
        "type": "pgConfig",
        "name": "Lab Automação",
        "host": "143.107.102.8",
        "port": 5432,
        "dbname": "data-energia",
        "max": 10,
        "idleTimeout": 1000,
        "connectionTimeout": 10000,
        "user": "leitor",
        "password": "garsoftData2024"
    },
    {
        "id": "5ff7b2eec84a8938",
        "type": "ui_group",
        "name": "Energia",
        "tab": "4151d7703cfd2b05",
        "order": 4,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "add459b43846ad81",
        "type": "ui_group",
        "name": "Descontos",
        "tab": "4151d7703cfd2b05",
        "order": 7,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0587f84de3fdfc47",
        "type": "ui_group",
        "name": "Novos Descontos",
        "tab": "4151d7703cfd2b05",
        "order": 8,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "34a51b2df8e3bcb8",
        "type": "ui_spacer",
        "z": "7ff87b268efdbf78",
        "name": "spacer",
        "group": "d9d99228efd78e53",
        "order": 6,
        "width": "4",
        "height": "3"
    },
    {
        "id": "d577c6e7f2aa82bd",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "start",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "const user = {\n    name: '',\n    remainingEnergy: 0,\n    totalEnergy: 0,\n    clientType: ''\n}\n\nconst station = {\n    enable: false,\n    transferedEnergy: 0,\n    power: 0,\n    chargerType: '',\n    powerDivider: 70\n}\n\nconst bill = {\n    date: '',\n    username: '',\n    chargedEnergy: 0,\n    value: 0,\n    pricePerEnergy: 0,\n    isAccounted: false\n}\n\nconst bills = [];\n\nflow.set('user', user);\nflow.set('station', station);\nflow.set('bill', bill);\nglobal.set('bills', bills);\n\nglobal.set('base_prices', {\n    \"AC_LENTO\": [1.2, 1.8],\n    \"AC_RAPIDO\": [1.8, 2.5],\n    \"DC_RAPIDO\": [2.5, 4]\n});\n\nglobal.set('discounts', {\n    \"AVULSO\": 1,\n    \"ASSINANTE\": 0.95,\n    \"FROTA\": 0.85\n});\n\nglobal.set('base_time_prices', []);\n\nglobal.set('billsPerTimeSlot', {\n    \"0-3\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"3-6\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"6-9\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"9-12\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"12-15\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"15-18\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"18-21\": { totalRev: 0, totalBills: 0, totalEnergy: 0 },\n    \"21-24\": { totalRev: 0, totalBills: 0, totalEnergy: 0 }\n});",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b0669dfb2ddb01f3",
        "type": "inject",
        "z": "c0c87725f2b6a546",
        "name": "engine",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 640,
        "y": 600,
        "wires": [
            [
                "85e50fb9af8b7256",
                "d8f72287e5ae31c8",
                "b9e14ec19f763fe9",
                "cafdc93db196d541",
                "20b22fe08255570b",
                "1eb8ad38d4736ee8",
                "6f43443aeb8ace08",
                "925c79710f12ab65",
                "39cec44df78e8bd9",
                "8b6709114939f29d"
            ]
        ]
    },
    {
        "id": "85e50fb9af8b7256",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "generator",
        "func": "const station = flow.get('station');\nconst user = flow.get('user');\nconst bill = flow.get('bill');\n\nif (station.enable && msg.payload.power) {\n    const power = msg.payload.power;\n    const transferredEnergy = Math.min(power, (user.totalEnergy - user.remainingEnergy));\n\n    user.remainingEnergy += transferredEnergy;\n    \n    station.power = power;\n    station.transferedEnergy += transferredEnergy;\n\n    bill.chargedEnergy += transferredEnergy;\n    bill.value = bill.chargedEnergy * bill.pricePerEnergy;\n\n    flow.set('station', station);\n    flow.set('user', user);\n    flow.set('bill', bill);\n}\n\nreturn user",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8b62aaf15d0e285a",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "power",
        "func": "const station = flow.get('station');\n\nif (station.enable)\n    return { payload: Math.round(msg.payload.power * 100) / 100 };\nelse\n    return {payload: 0};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 640,
        "wires": [
            [
                "72be1021655bc916",
                "af0c8a794d5177b2"
            ]
        ]
    },
    {
        "id": "72be1021655bc916",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "f68e84da2add074e",
        "order": 2,
        "width": "7",
        "height": 1,
        "name": "",
        "label": "Potência de Carregamento",
        "format": "{{msg.payload}} kW",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1100,
        "y": 640,
        "wires": []
    },
    {
        "id": "086daf833efc0895",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "f68e84da2add074e",
        "order": 3,
        "width": "7",
        "height": 1,
        "name": "",
        "label": "Energia no Carro",
        "format": "{{msg.payload}} kWh",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1070,
        "y": 680,
        "wires": []
    },
    {
        "id": "d8f72287e5ae31c8",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "car energy",
        "func": "const user = flow.get('user');\n\nreturn {payload: Math.round(user.remainingEnergy* 100) / 100, topic: 'car energy'};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 680,
        "wires": [
            [
                "086daf833efc0895",
                "69dd362a209da38d"
            ]
        ]
    },
    {
        "id": "fadf2a18085299a4",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "nameInput",
        "func": "const nameInput = msg.payload;\nflow.set('nameInput', nameInput);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "0153ce0046a0c270",
        "type": "ui_text_input",
        "z": "c0c87725f2b6a546",
        "name": "",
        "label": "Nome",
        "tooltip": "",
        "group": "0d6348cd3c581ac5",
        "order": 1,
        "width": "7",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 590,
        "y": 260,
        "wires": [
            [
                "fadf2a18085299a4"
            ]
        ]
    },
    {
        "id": "edae77a51194c7b5",
        "type": "ui_button",
        "z": "c0c87725f2b6a546",
        "name": "",
        "group": "0d6348cd3c581ac5",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Carregar",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 260,
        "y": 460,
        "wires": [
            [
                "66136687595b7255"
            ]
        ]
    },
    {
        "id": "6dd2a349b5ebd5de",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "start charging",
        "func": "function getRandomDateLastMonth() {\n    const today = new Date();\n    const firstDayLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const lastDayLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);\n\n    const randomTime = firstDayLastMonth.getTime() + Math.random() * (lastDayLastMonth.getTime() - firstDayLastMonth.getTime());\n    return new Date(randomTime);\n}\n\nconst user = flow.get('user');\nconst station = flow.get('station');\nconst bill = flow.get('bill');\nconst baseTimePrice = global.get('base_time_prices');\n\nuser.name = flow.get('nameInput');\nlet rnd = Math.floor(Math.random() * 10) + 1;\nuser.remainingEnergy = rnd;\nrnd = Math.floor(Math.random() * (120 - 100 + 1)) + 100;\nuser.totalEnergy = rnd;\n\nstation.enable = true;\nstation.transferedEnergy = 0;\nstation.power = 0;\n\nbill.date = getRandomDateLastMonth();\nbill.username = flow.get('nameInput');\nbill.chargedEnergy = 0;\nbill.value = 0;\n\nreturn { payload: \"\" }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            [
                "6a59374d70f9cfbf"
            ]
        ]
    },
    {
        "id": "b9e14ec19f763fe9",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "generator stopper",
        "func": "const user = flow.get('user');\nconst station = flow.get('station');\n\nif (user.remainingEnergy >= user.totalEnergy) {\n    station.enable = false;\n}\n\nflow.set('station', station);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "cafdc93db196d541",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "car total energy",
        "func": "return {payload: Math.round(flow.get('user').totalEnergy * 100) / 100, topic: 'total energy'};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 720,
        "wires": [
            [
                "f2dd99add1175293",
                "69dd362a209da38d"
            ]
        ]
    },
    {
        "id": "f2dd99add1175293",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "f68e84da2add074e",
        "order": 1,
        "width": "7",
        "height": 1,
        "name": "",
        "label": "Capacidade de Energia do Carro",
        "format": "{{msg.payload}} kWh",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1120,
        "y": 720,
        "wires": []
    },
    {
        "id": "20b22fe08255570b",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "chargedEnergy",
        "func": "const bill = flow.get('bill');\nreturn {payload: Math.round(bill.chargedEnergy * 100) / 100};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1060,
        "wires": [
            [
                "58e76f9cd60c913c"
            ]
        ]
    },
    {
        "id": "58e76f9cd60c913c",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "57383ef85f904023",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Energia Carregada",
        "format": "{{msg.payload}} kWh",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1070,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1eb8ad38d4736ee8",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "billValue",
        "func": "const bill = flow.get('bill');\nconst value = Math.round(bill.value * 100) / 100;\nreturn {payload: `R$${value.toFixed(2)}`};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1100,
        "wires": [
            [
                "60b13fdb9af300fc"
            ]
        ]
    },
    {
        "id": "60b13fdb9af300fc",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "57383ef85f904023",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Valor da Conta",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1060,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6f43443aeb8ace08",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "client",
        "func": "const bill = flow.get('bill');\nreturn {payload: bill.username}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1020,
        "wires": [
            [
                "fcb46bbd0403ae43"
            ]
        ]
    },
    {
        "id": "fcb46bbd0403ae43",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "57383ef85f904023",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Cliente",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1040,
        "y": 1020,
        "wires": []
    },
    {
        "id": "925c79710f12ab65",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "date",
        "func": "const bill = flow.get('bill');\nlet date = bill.date;\n\nif (date !== '') {\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const year = date.getFullYear();\n    const hour = String(date.getHours()).padStart(2, '0');\n    const minute = String(date.getMinutes()).padStart(2, '0');\n\n    return { payload: `${day}/${month}/${year} ${hour}:${minute}` };\n} else {\n    return { payload: '' };\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 980,
        "wires": [
            [
                "7c4b651f27a5e001"
            ]
        ]
    },
    {
        "id": "7c4b651f27a5e001",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "57383ef85f904023",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Data",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1030,
        "y": 980,
        "wires": []
    },
    {
        "id": "39cec44df78e8bd9",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "billValue",
        "func": "const bill = flow.get('bill');\nconst price = Math.round(bill.pricePerEnergy * 100) / 100;\nreturn {payload: `R$${price.toFixed(2)}`};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1180,
        "wires": [
            [
                "416e5df97a1917e8"
            ]
        ]
    },
    {
        "id": "416e5df97a1917e8",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "57383ef85f904023",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Preço da Energia (por kWh)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1100,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8d642697a2c7ad7d",
        "type": "ui_button",
        "z": "c0c87725f2b6a546",
        "name": "",
        "group": "57383ef85f904023",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Pagar",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 790,
        "y": 1220,
        "wires": [
            [
                "61b9152d714a0fe1"
            ]
        ]
    },
    {
        "id": "61b9152d714a0fe1",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "pay",
        "func": "const bills = global.get('bills');\nconst bill = flow.get('bill');\n\nbills.push({ ...bill }); // ← Clona o objeto\nglobal.set('bills', bills);\n\nreturn { payload: true };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1220,
        "wires": [
            [
                "851467e7f0f8b0e5"
            ]
        ]
    },
    {
        "id": "851467e7f0f8b0e5",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "reset",
        "func": "const user = flow.get('user');\nconst station = flow.get('station');\nconst new_bill = flow.get('bill');\n\nuser.name = '';\nuser.remainingEnergy = 0;\nuser.totalEnergy = 0;\n\nstation.enable = false;\nstation.transferedEnergy = 0;\nstation.power = 0;\n\nnew_bill.date = '';\nnew_bill.username = '';\nnew_bill.chargedEnergy = 0;\nnew_bill.value = 0;\nnew_bill.pricePerEnergy = 0;\n\nflow.set('user', user);\nflow.set('station', station);\nflow.set('bill', new_bill);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "cfebb2f4e348e767",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "f68e84da2add074e",
        "order": 4,
        "width": "7",
        "height": 1,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1030,
        "y": 760,
        "wires": []
    },
    {
        "id": "8b6709114939f29d",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "status",
        "func": "const station = flow.get('station');\n\nif (station.enable) return {payload: 'CARREGANDO'};\nelse return {payload: 'DISPONÍVEL'}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 760,
        "wires": [
            [
                "cfebb2f4e348e767"
            ]
        ]
    },
    {
        "id": "69dd362a209da38d",
        "type": "ui_chart",
        "z": "c0c87725f2b6a546",
        "name": "",
        "group": "f68e84da2add074e",
        "order": 5,
        "width": "7",
        "height": "6",
        "label": "Energia do Carro (kWh)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "af0c8a794d5177b2",
        "type": "ui_chart",
        "z": "c0c87725f2b6a546",
        "name": "",
        "group": "f68e84da2add074e",
        "order": 6,
        "width": "7",
        "height": "6",
        "label": "Potência de Carregamento (kW)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "30",
        "removeOlderPoints": "",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "b51fdb569db729a7",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "reset energy",
        "func": "return [{payload: []}, {payload: []}];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 500,
        "wires": [
            [
                "69dd362a209da38d",
                "af0c8a794d5177b2"
            ]
        ]
    },
    {
        "id": "ee674fcef7caa146",
        "type": "mqtt in",
        "z": "c0c87725f2b6a546",
        "name": "Dados JE05",
        "topic": "garsoft/dev/je05/dados",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2fa5a786019761a6",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 600,
        "wires": [
            [
                "df896173bdf6ed11"
            ]
        ]
    },
    {
        "id": "df896173bdf6ed11",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "Consumo em kWh",
        "func": "// consumo mockado através da potência do lab\n// com um divisor para atingir a potência do tipo de carregador\nconst station = flow.get('station');\nconst divider = station.powerDivider;\n\nmsg.payload.power = msg.payload.DATA.PT / divider;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 700,
        "wires": [
            [
                "8b62aaf15d0e285a",
                "85e50fb9af8b7256"
            ]
        ]
    },
    {
        "id": "e0da2ff71541853a",
        "type": "split",
        "z": "c0c87725f2b6a546",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload.timeRanges",
        "x": 1190,
        "y": 180,
        "wires": [
            [
                "f8b5e52cdc336be8"
            ]
        ]
    },
    {
        "id": "d3917322a9c8b6ec",
        "type": "join",
        "z": "c0c87725f2b6a546",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "8",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1270,
        "y": 360,
        "wires": [
            [
                "22bd5c2fbc969f63"
            ]
        ]
    },
    {
        "id": "22bd5c2fbc969f63",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "setPriceRange",
        "func": "const user = flow.get('user');\nconst station = flow.get('station');\n\nconst basePrices = global.get('base_prices');\nconst discounts = global.get('discounts');\n\nconst minMax = basePrices[station.chargerType];\n\nconst avgPower = msg.payload\n  .sort((a, b) => a.hora_inicio - b.hora_inicio)\n  .map(item => item.val);;\n\nconst min = Math.min(...avgPower);\nconst max = Math.max(...avgPower);\n\n// Normaliza para o intervalo minMax\nconst timeWindowDiscount = avgPower.map(v => {\n  return (minMax[0] + ((v - min) / (max - min)) * (minMax[1] - minMax[0])) * discounts[user.clientType];\n});\n\nglobal.set('base_time_prices', timeWindowDiscount);\n\nreturn { payload: timeWindowDiscount }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 420,
        "wires": [
            [
                "fe7afbd2ae4866ec"
            ]
        ]
    },
    {
        "id": "864cd1b923b3505e",
        "type": "ui_dropdown",
        "z": "c0c87725f2b6a546",
        "name": "",
        "label": "Tipo do Carregador",
        "tooltip": "",
        "place": "Selecione",
        "group": "0d6348cd3c581ac5",
        "order": 2,
        "width": "7",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Carregador Lento (AC Nível 2)",
                "value": "AC_LENTO",
                "type": "str"
            },
            {
                "label": "Carregador Semi-Rápido (AC Trifásico)",
                "value": "AC_RAPIDO",
                "type": "str"
            },
            {
                "label": "Carregador Rápido (DC - CCS)",
                "value": "DC_RAPIDO",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "786fd9368432062f"
            ]
        ]
    },
    {
        "id": "786fd9368432062f",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "checkSelections",
        "func": "const user = flow.get('user');\nconst station = flow.get('station');\nconst bill = flow.get('bill');\n\nconst divByType = {\n    \"AC_LENTO\": 70,\n    \"AC_RAPIDO\": 24,\n    \"DC_RAPIDO\": 10\n}\n\nif ([\"AC_LENTO\", \"AC_RAPIDO\", \"DC_RAPIDO\"].includes(msg.payload)) {\n    station.chargerType = msg.payload;\n    station.powerDivider = divByType[msg.payload]\n    flow.set('station', station);\n} else if ([\"AVULSO\", \"ASSINANTE\", \"FROTA\"].includes(msg.payload)) {\n    user.clientType = msg.payload;\n    flow.set('user', user);\n}\n\nif (user.clientType === '' || station.chargerType === '' || bill.date === '') {\n    return { payload: false}\n} else {\n    return { payload: true }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 300,
        "wires": [
            [
                "e23bc1ca7ac4763b"
            ]
        ]
    },
    {
        "id": "0240c8e5188d2754",
        "type": "ui_dropdown",
        "z": "c0c87725f2b6a546",
        "name": "",
        "label": "Tipo de Cliente",
        "tooltip": "",
        "place": "Selecione",
        "group": "0d6348cd3c581ac5",
        "order": 3,
        "width": "7",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Avulso",
                "value": "AVULSO",
                "type": "str"
            },
            {
                "label": "Assinante",
                "value": "ASSINANTE",
                "type": "str"
            },
            {
                "label": "Frota",
                "value": "FROTA",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 620,
        "y": 360,
        "wires": [
            [
                "786fd9368432062f"
            ]
        ]
    },
    {
        "id": "66136687595b7255",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "isSet",
        "func": "const user = flow.get('user');\nconst station = flow.get('station');\nconst bill = flow.get('bill');\n\nif (user.clientType === '' || station.chargerType === '' || bill.date === '') {\n    return { payload: false }\n} else {\n    return { payload: true }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 460,
        "wires": [
            [
                "3398d9a182b8897c"
            ]
        ]
    },
    {
        "id": "3398d9a182b8897c",
        "type": "switch",
        "z": "c0c87725f2b6a546",
        "name": "readyToCharge",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 460,
        "wires": [
            [
                "ca2b4a5ae2921233"
            ],
            [
                "6dd2a349b5ebd5de",
                "b51fdb569db729a7"
            ]
        ]
    },
    {
        "id": "6a59374d70f9cfbf",
        "type": "ui_text",
        "z": "c0c87725f2b6a546",
        "group": "0d6348cd3c581ac5",
        "order": 6,
        "width": "7",
        "height": "1",
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#f23131",
        "x": 1030,
        "y": 420,
        "wires": []
    },
    {
        "id": "ca2b4a5ae2921233",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "Setta Erro",
        "func": "const bill = flow.get('bill');\n\nif (bill.date === '') {\n    return { payload: \"Defina a data\" };\n} else {\n    return { payload: \"Selecione tipo de cliente e de carregador\" };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 420,
        "wires": [
            [
                "6a59374d70f9cfbf"
            ]
        ]
    },
    {
        "id": "e23bc1ca7ac4763b",
        "type": "switch",
        "z": "c0c87725f2b6a546",
        "name": "readyToPrice",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "8c0e80b5668d80fc"
            ]
        ]
    },
    {
        "id": "8c0e80b5668d80fc",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "setTimeRanges",
        "func": "const timeRanges = [[0, 3], [3, 6], [6, 9], [9, 12], [12, 15], [15, 18], [18, 21], [21, 24]]\nreturn { payload: { timeRanges } };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 120,
        "wires": [
            [
                "e0da2ff71541853a"
            ]
        ]
    },
    {
        "id": "f8b5e52cdc336be8",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "prepareQuery",
        "func": "const query = `\nSELECT \n  ${msg.payload.timeRanges[0]} AS hora_inicio,\n  SUM(potencia_aparente_total)/COUNT(potencia_aparente_total) AS val\nFROM public.demanda\nWHERE EXTRACT(HOUR FROM \"timestamp\") BETWEEN ${msg.payload.timeRanges[0]} AND ${msg.payload.timeRanges[1]}\n`;\n\nreturn { query };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 240,
        "wires": [
            [
                "dfa715b3b0c2f103"
            ]
        ]
    },
    {
        "id": "dfa715b3b0c2f103",
        "type": "pg",
        "z": "c0c87725f2b6a546",
        "name": "",
        "query": "",
        "pgConfig": "52bbcde4b86dc022",
        "outputFormat": "single",
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "d3917322a9c8b6ec"
            ],
            []
        ]
    },
    {
        "id": "6b21c1d1f32ae067",
        "type": "ui_button",
        "z": "c0c87725f2b6a546",
        "name": "",
        "group": "0d6348cd3c581ac5",
        "order": 4,
        "width": "7",
        "height": "1",
        "passthru": false,
        "label": "Define Data e Hora",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "cb3df65e8d9f70be"
            ]
        ]
    },
    {
        "id": "cb3df65e8d9f70be",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "setDate",
        "func": "function getRandomDateLastMonth() {\n    const today = new Date();\n    const firstDayLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const lastDayLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);\n\n    const randomTime = firstDayLastMonth.getTime() + Math.random() * (lastDayLastMonth.getTime() - firstDayLastMonth.getTime());\n    return new Date(randomTime);\n}\n\nconst bill = flow.get('bill');\n\nbill.date = getRandomDateLastMonth();\n\nflow.set('bill', bill);\n\nreturn { payload: \"\" };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "925c79710f12ab65",
                "fe7afbd2ae4866ec",
                "6a59374d70f9cfbf"
            ]
        ]
    },
    {
        "id": "fe7afbd2ae4866ec",
        "type": "function",
        "z": "c0c87725f2b6a546",
        "name": "setPrice",
        "func": "const baseTimePrices = global.get('base_time_prices');\nconst bill = flow.get('bill');\n\nif (baseTimePrices.length === 0 || bill.date === '') {\n    bill.pricePerEnergy = 0;\n} else {\n    const hour = bill.date.getHours();\n    const idx = Math.floor(hour/3);\n    bill.pricePerEnergy = baseTimePrices[idx];\n}\n\nflow.set('bill', bill);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 480,
        "wires": [
            [
                "39cec44df78e8bd9"
            ]
        ]
    },
    {
        "id": "c0263d731e9802ec",
        "type": "inject",
        "z": "7ff87b268efdbf78",
        "name": "engine",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 180,
        "wires": [
            [
                "88f3c4b2dae01765",
                "c172dd7af0456c20",
                "9d9c13f527edd19b",
                "cd405fe223a85f12",
                "8107458de6c4e257",
                "44bece713a1ee3f4",
                "2c820c776970a207",
                "3250c5a86cc59c0b"
            ]
        ]
    },
    {
        "id": "88f3c4b2dae01765",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "revenue",
        "func": "let bills = global.get('bills');\n\nlet totalValue = 0;\nif (bills) {\n    bills.forEach(bill => {\n        totalValue += bill.value;\n    });\n}\nreturn { payload: `R\\$${(totalValue || 0).toFixed(2)}` };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "4bf2440a77dc2508"
            ]
        ]
    },
    {
        "id": "4bf2440a77dc2508",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "d9d99228efd78e53",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Receita Total",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 160,
        "wires": []
    },
    {
        "id": "c172dd7af0456c20",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "number of bills",
        "func": "let bills = global.get('bills');\n\nif (bills) return {payload: bills.length};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "5f4c6bc68d43055e"
            ]
        ]
    },
    {
        "id": "5f4c6bc68d43055e",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "d9d99228efd78e53",
        "order": 3,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Total de Contas",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 680,
        "y": 120,
        "wires": []
    },
    {
        "id": "9d9c13f527edd19b",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "ticket",
        "func": "let bills = global.get('bills');\n\nlet totalValue = 0;\nif (bills) {\n    bills.forEach(bill => {\n        totalValue += bill.value;\n    });\n}\n\nreturn { payload: `R\\$${(totalValue / bills.length || 0).toFixed(2)}` };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "b5444fad3751ddc6"
            ]
        ]
    },
    {
        "id": "b5444fad3751ddc6",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "d9d99228efd78e53",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Ticket Médio",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 670,
        "y": 200,
        "wires": []
    },
    {
        "id": "cd405fe223a85f12",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "number of clients",
        "func": "const bills = global.get('bills');\n\nlet names = bills.map(b => b.username);\nlet uniqueNames = [...new Set(names)];\nlet numUniqueNames = uniqueNames.length;\n\nreturn {payload: numUniqueNames};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": [
            [
                "441ad453b4bccbd2"
            ]
        ]
    },
    {
        "id": "441ad453b4bccbd2",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "d9d99228efd78e53",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Número de Clientes",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 700,
        "y": 240,
        "wires": []
    },
    {
        "id": "8107458de6c4e257",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "ltv",
        "func": "let bills = global.get('bills');\n\nlet totalValue = 0;\nif (bills) {\n    bills.forEach(bill => {\n        totalValue += bill.value;\n    });\n}\n\nlet names = bills.map(b => b.username);\nlet uniqueNames = [...new Set(names)];\nlet numUniqueNames = uniqueNames.length;\n\nreturn {payload: `R\\$${(totalValue/numUniqueNames || 0).toFixed(2)}` };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "f9a627403eaf37a4"
            ]
        ]
    },
    {
        "id": "f9a627403eaf37a4",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "d9d99228efd78e53",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "LTV",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 280,
        "wires": []
    },
    {
        "id": "44bece713a1ee3f4",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "sum revenues",
        "func": "let bills = global.get('bills');\nlet billsPerTimeSlot = global.get('billsPerTimeSlot');\n\nfor (const b of bills) {\n    if (b.isAccounted) continue\n    const hour = b.date.getHours();\n    const value = b[\"value\"];\n    const energy = b.chargedEnergy;\n    switch (true){\n        case (0 <= hour && hour < 3):\n            billsPerTimeSlot[\"0-3\"].totalBills += 1;\n            billsPerTimeSlot[\"0-3\"].totalRev += value;\n            billsPerTimeSlot[\"0-3\"].totalEnergy += energy;\n            break;\n        case (3 <= hour && hour < 6):\n            billsPerTimeSlot[\"3-6\"].totalBills += 1;\n            billsPerTimeSlot[\"3-6\"].totalRev += value;\n            billsPerTimeSlot[\"3-6\"].totalEnergy += energy;\n            break;\n        case (6 <= hour && hour < 9):\n            billsPerTimeSlot[\"6-9\"].totalBills += 1;\n            billsPerTimeSlot[\"6-9\"].totalRev += value;\n            billsPerTimeSlot[\"6-9\"].totalEnergy += energy;\n            break;\n        case (9 <= hour && hour < 12):\n            billsPerTimeSlot[\"9-12\"].totalBills += 1;\n            billsPerTimeSlot[\"9-12\"].totalRev += value;\n            billsPerTimeSlot[\"9-12\"].totalEnergy += energy;\n            break;\n        case (12 <= hour && hour < 15):\n            billsPerTimeSlot[\"12-15\"].totalBills += 1;\n            billsPerTimeSlot[\"12-15\"].totalRev += value;\n            billsPerTimeSlot[\"12-15\"].totalEnergy += energy;\n            break;\n        case (15 <= hour && hour < 18):\n            billsPerTimeSlot[\"15-18\"].totalBills += 1;\n            billsPerTimeSlot[\"15-18\"].totalRev += value;\n            billsPerTimeSlot[\"15-18\"].totalEnergy += energy;\n            break;\n        case (18 <= hour && hour < 21):\n            billsPerTimeSlot[\"18-21\"].totalBills += 1;\n            billsPerTimeSlot[\"18-21\"].totalRev += value;\n            billsPerTimeSlot[\"18-21\"].totalEnergy += energy;\n            break;\n        case (21 <= hour && hour < 24):\n            billsPerTimeSlot[\"21-24\"].totalBills += 1;\n            billsPerTimeSlot[\"21-24\"].totalRev += value;\n            billsPerTimeSlot[\"21-24\"].totalEnergy += energy;\n            break;\n        default:\n            break;\n    }\n    b.isAccounted = true;\n}\n\nglobal.set('billsPerTimeSlot', billsPerTimeSlot);\n\nlet formattedBills = {};\n\nfor (const slot in billsPerTimeSlot) {\n    const data = billsPerTimeSlot[slot];\n    formattedBills[slot] = {\n        totalRev: `R$ ${data.totalRev.toFixed(2)}`,\n        totalBills: data.totalBills, // mantido como número\n        totalEnergy: `${data.totalEnergy.toFixed(2)} kWh`\n    };\n}\n\nreturn { payload: formattedBills };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 380,
        "wires": [
            [
                "22186c3764c0abe9",
                "e2b7315c43695125",
                "d5670c5462c0afe3",
                "ae40ddf737fb210d",
                "ddfafdef14918a1c",
                "7f77e3c6dcd62512",
                "db4263aeb17c6cd7",
                "25f1e09b73cfbade",
                "ce684d74d2c0df58",
                "11a2a517d08fbcb9",
                "eebac589eee36e46",
                "74819ebe77f2efe8",
                "9cf104be9674c64e",
                "1609055a0bebf110",
                "49c4777c5beeaca0",
                "dce51cdb9b796a9b",
                "5a178b5d28c45d12",
                "c1a8754e42cb1701",
                "01449d05a4aad5cd",
                "5aa9d07856663157",
                "ec43f28041e2db80",
                "d71e81d27ac9e927",
                "391cf5de49143500",
                "cf71967336c32d4b"
            ]
        ]
    },
    {
        "id": "22186c3764c0abe9",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "0h - 3h",
        "format": "{{msg.payload[\"0-3\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "2c820c776970a207",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "prices",
        "func": "let base_prices = global.get('base_prices');\nlet prices = [];\n\nprices.push(`R\\$${(Math.round(base_prices[\"AC_LENTO\"][0] * 100) / 100).toFixed(2)} a R\\$${(Math.round(base_prices[\"AC_LENTO\"][1] * 100) / 100).toFixed(2)}`);\nprices.push(`R\\$${(Math.round(base_prices[\"AC_RAPIDO\"][0] * 100) / 100).toFixed(2)} a R\\$${(Math.round(base_prices[\"AC_RAPIDO\"][1] * 100) / 100).toFixed(2)}`);\nprices.push(`R\\$${(Math.round(base_prices[\"DC_RAPIDO\"][0] * 100) / 100).toFixed(2)} a R\\$${(Math.round(base_prices[\"DC_RAPIDO\"][1] * 100) / 100).toFixed(2)}`);\n\nreturn {payload: prices};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 720,
        "wires": [
            [
                "6d884e9fcee69b29",
                "c338f0c4a7421107",
                "59c6f30b78e2a491"
            ]
        ]
    },
    {
        "id": "6d884e9fcee69b29",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "b17c97df988fc2a7",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Carregador Lento (AC Nível 2)",
        "format": "{{msg.payload[0]}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 730,
        "y": 720,
        "wires": []
    },
    {
        "id": "c338f0c4a7421107",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "b17c97df988fc2a7",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Carregador Semi-Rápido (AC Trifásico)",
        "format": "{{msg.payload[1]}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 760,
        "y": 760,
        "wires": []
    },
    {
        "id": "59c6f30b78e2a491",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "b17c97df988fc2a7",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Carregador Rápido (DC - CCS)",
        "format": "{{msg.payload[2]}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 730,
        "y": 800,
        "wires": []
    },
    {
        "id": "881f0f0f678cacb0",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "minSlow",
        "label": "Min",
        "tooltip": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1020,
        "y": 760,
        "wires": [
            [
                "256d82a8f5d34866"
            ]
        ]
    },
    {
        "id": "de0d816faa3aeea1",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "maxSlow",
        "label": "Max",
        "tooltip": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1020,
        "y": 800,
        "wires": [
            [
                "c64cfdbaac9d1fd2"
            ]
        ]
    },
    {
        "id": "256d82a8f5d34866",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newSlowMinPrice",
        "func": "flow.set('newSlowMinPrice', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c64cfdbaac9d1fd2",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newSlowMaxPrice",
        "func": "flow.set('newSlowMaxPrice', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "65b338aba5831dd3",
        "type": "ui_button",
        "z": "7ff87b268efdbf78",
        "name": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Atualizar Preços",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1040,
        "y": 1100,
        "wires": [
            [
                "a563fef8d4ebad24"
            ]
        ]
    },
    {
        "id": "a563fef8d4ebad24",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "set new prices",
        "func": "let base_prices = global.get('base_prices');\n\nconst newSlowMinPrice = flow.get('newSlowMinPrice');\nconst newSlowMaxPrice = flow.get('newSlowMaxPrice');\nconst newMediumMinPrice = flow.get('newMediumMinPrice');\nconst newMediumMaxPrice = flow.get('newMediumMaxPrice');\nconst newFastMinPrice = flow.get('newFastMinPrice');\nconst newFastMaxPrice = flow.get('newFastMaxPrice');\n\nif (newSlowMinPrice !== undefined) base_prices[\"AC_LENTO\"][0] = newSlowMinPrice;\nif (newSlowMaxPrice !== undefined) base_prices[\"AC_LENTO\"][1] = newSlowMaxPrice;\nif (newMediumMinPrice !== undefined) base_prices[\"AC_MEDIO\"][0] = newMediumMinPrice;\nif (newMediumMaxPrice !== undefined) base_prices[\"AC_MEDIO\"][1] = newMediumMaxPrice;\nif (newFastMinPrice !== undefined) base_prices[\"AC_RAPIDO\"][0] = newFastMinPrice;\nif (newFastMaxPrice !== undefined) base_prices[\"AC_RAPIDO\"][1] = newFastMaxPrice;\n\nglobal.set('base_prices', base_prices);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "e2b7315c43695125",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "3h - 6h",
        "format": "{{msg.payload[\"3-6\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 420,
        "wires": []
    },
    {
        "id": "d5670c5462c0afe3",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "6h - 9h",
        "format": "{{msg.payload[\"6-9\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 460,
        "wires": []
    },
    {
        "id": "ae40ddf737fb210d",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "9h - 12h",
        "format": "{{msg.payload[\"9-12\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 500,
        "wires": []
    },
    {
        "id": "ddfafdef14918a1c",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "12h - 15h",
        "format": "{{msg.payload[\"12-15\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "7f77e3c6dcd62512",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "15h - 18h",
        "format": "{{msg.payload[\"15-18\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 580,
        "wires": []
    },
    {
        "id": "db4263aeb17c6cd7",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "18h - 21h",
        "format": "{{msg.payload[\"18-21\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 620,
        "wires": []
    },
    {
        "id": "25f1e09b73cfbade",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "812c9f59fa48c699",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "21h - 24h",
        "format": "{{msg.payload[\"21-24\"].totalRev}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 660,
        "wires": []
    },
    {
        "id": "ce684d74d2c0df58",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "0h - 3h",
        "format": "{{msg.payload[\"0-3\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 380,
        "wires": []
    },
    {
        "id": "11a2a517d08fbcb9",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "3h - 6h",
        "format": "{{msg.payload[\"3-6\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 420,
        "wires": []
    },
    {
        "id": "eebac589eee36e46",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "6h - 9h",
        "format": "{{msg.payload[\"6-9\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 460,
        "wires": []
    },
    {
        "id": "74819ebe77f2efe8",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "9h - 12h",
        "format": "{{msg.payload[\"9-12\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 500,
        "wires": []
    },
    {
        "id": "9cf104be9674c64e",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "12h - 15h",
        "format": "{{msg.payload[\"12-15\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 540,
        "wires": []
    },
    {
        "id": "1609055a0bebf110",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "15h - 18h",
        "format": "{{msg.payload[\"15-18\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "49c4777c5beeaca0",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "18h - 21h",
        "format": "{{msg.payload[\"18-21\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "dce51cdb9b796a9b",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "0a04b855efa1e24e",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "21h - 24h",
        "format": "{{msg.payload[\"21-24\"].totalBills}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 900,
        "y": 660,
        "wires": []
    },
    {
        "id": "5a178b5d28c45d12",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "0h - 3h",
        "format": "{{msg.payload[\"0-3\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "c1a8754e42cb1701",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "3h - 6h",
        "format": "{{msg.payload[\"3-6\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 420,
        "wires": []
    },
    {
        "id": "01449d05a4aad5cd",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "6h - 9h",
        "format": "{{msg.payload[\"6-9\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 460,
        "wires": []
    },
    {
        "id": "5aa9d07856663157",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "9h - 12h",
        "format": "{{msg.payload[\"9-12\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 500,
        "wires": []
    },
    {
        "id": "ec43f28041e2db80",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "12h - 15h",
        "format": "{{msg.payload[\"12-15\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 540,
        "wires": []
    },
    {
        "id": "d71e81d27ac9e927",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "15h - 18h",
        "format": "{{msg.payload[\"15-18\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 580,
        "wires": []
    },
    {
        "id": "391cf5de49143500",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "18h - 21h",
        "format": "{{msg.payload[\"18-21\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 620,
        "wires": []
    },
    {
        "id": "cf71967336c32d4b",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "5ff7b2eec84a8938",
        "order": 1,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "21h - 24h",
        "format": "{{msg.payload[\"21-24\"].totalEnergy}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1140,
        "y": 660,
        "wires": []
    },
    {
        "id": "e82c7995a7f04f9b",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "minMedium",
        "label": "Min",
        "tooltip": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1030,
        "y": 880,
        "wires": [
            [
                "2b2bb76f0f23bd44"
            ]
        ]
    },
    {
        "id": "3cc1a27baf569ab8",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "maxMedium",
        "label": "Max",
        "tooltip": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1030,
        "y": 920,
        "wires": [
            [
                "369360131fe51c91"
            ]
        ]
    },
    {
        "id": "2b2bb76f0f23bd44",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newMediumMinPrice",
        "func": "flow.set('newMediumMinPrice', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "369360131fe51c91",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newMediumMaxPrice",
        "func": "flow.set('newMediumMaxPrice', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "c5caeb62a24eed14",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "minFast",
        "label": "Min",
        "tooltip": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1020,
        "y": 1000,
        "wires": [
            [
                "2b6f8a7dbfefd8ac"
            ]
        ]
    },
    {
        "id": "30d48401da0a02b8",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "maxFast",
        "label": "Max",
        "tooltip": "",
        "group": "7eb4ad1bb9f8ef34",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 1020,
        "y": 1040,
        "wires": [
            [
                "5dbbe394a3077403"
            ]
        ]
    },
    {
        "id": "2b6f8a7dbfefd8ac",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newFastMinPrice",
        "func": "flow.set('newFastMinPrice', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "5dbbe394a3077403",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newFastMaxPrice",
        "func": "flow.set('newFastMaxPrice', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9eb21e3090304ef7",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "7eb4ad1bb9f8ef34",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Carregador Lento (AC Nível 2)",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 720,
        "wires": []
    },
    {
        "id": "89b3bc88dc3ceb00",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "7eb4ad1bb9f8ef34",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Carregador Semi-Rápido (AC Trifásico)",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1120,
        "y": 840,
        "wires": []
    },
    {
        "id": "f55078011ee28c63",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "7eb4ad1bb9f8ef34",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Carregador Rápido (DC - CCS)",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1090,
        "y": 960,
        "wires": []
    },
    {
        "id": "3250c5a86cc59c0b",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "discounts",
        "func": "let discounts = global.get('discounts');\nlet formattedDiscounts = [];\n\nformattedDiscounts.push(`${100 - discounts[\"AVULSO\"]*100}%`);\nformattedDiscounts.push(`${100 - discounts[\"ASSINANTE\"]*100}%`);\nformattedDiscounts.push(`${100 - discounts[\"FROTA\"]*100}%`);\n\nreturn {payload: formattedDiscounts};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 860,
        "wires": [
            [
                "02fcbee7cf3653db",
                "7dd24f64f24eebcb",
                "381e1404b7063322"
            ]
        ]
    },
    {
        "id": "02fcbee7cf3653db",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "add459b43846ad81",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Avulso",
        "format": "{{msg.payload[0]}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 860,
        "wires": []
    },
    {
        "id": "7dd24f64f24eebcb",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "add459b43846ad81",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Assinante",
        "format": "{{msg.payload[1]}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 660,
        "y": 900,
        "wires": []
    },
    {
        "id": "381e1404b7063322",
        "type": "ui_text",
        "z": "7ff87b268efdbf78",
        "group": "add459b43846ad81",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Frota",
        "format": "{{msg.payload[2]}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 650,
        "y": 940,
        "wires": []
    },
    {
        "id": "043ba3da5d17d312",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "newAvulso",
        "label": "Avulso",
        "tooltip": "",
        "group": "0587f84de3fdfc47",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 410,
        "y": 1040,
        "wires": [
            [
                "d769c6a856537975"
            ]
        ]
    },
    {
        "id": "d769c6a856537975",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newAvulsoDiscount",
        "func": "flow.set('newAvulsoDiscount', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "ee2c1924a2284a9d",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "newAssinante",
        "label": "Assinante",
        "tooltip": "",
        "group": "0587f84de3fdfc47",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "5defcb34bac9b29a"
            ]
        ]
    },
    {
        "id": "5defcb34bac9b29a",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newAssinanteDiscount",
        "func": "flow.set('newAssinanteDiscount', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "fd9fd3ec1f5a68c1",
        "type": "ui_text_input",
        "z": "7ff87b268efdbf78",
        "name": "newFrota",
        "label": "Frota",
        "tooltip": "",
        "group": "0587f84de3fdfc47",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 400,
        "y": 1120,
        "wires": [
            [
                "80a6e5425f2023dd"
            ]
        ]
    },
    {
        "id": "80a6e5425f2023dd",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "newFrotaDiscount",
        "func": "flow.set('newFrotaDiscount', msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "aade35e4867ea85f",
        "type": "ui_button",
        "z": "7ff87b268efdbf78",
        "name": "",
        "group": "0587f84de3fdfc47",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Atualizar Descontos",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 1180,
        "wires": [
            [
                "e1648bdf1eca73f2"
            ]
        ]
    },
    {
        "id": "e1648bdf1eca73f2",
        "type": "function",
        "z": "7ff87b268efdbf78",
        "name": "set new discounts",
        "func": "let discounts = global.get('discounts');\n\nconst newAvulsoDiscount = flow.get('newAvulsoDiscount');\nconst newAssinanteDiscount = flow.get('newAssinanteDiscount');\nconst newFrotaDiscount = flow.get('newFrotaDiscount');\n\nif (newAvulsoDiscount !== undefined) discounts[\"AVULSO\"] = (100 - newAvulsoDiscount) / 100;\nif (newAssinanteDiscount !== undefined) discounts[\"ASSINANTE\"] = (100 - newAssinanteDiscount) / 100;\nif (newFrotaDiscount !== undefined) discounts[\"FROTA\"] = (100 - newFrotaDiscount) / 100;\n\nglobal.set('discounts', discounts);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1180,
        "wires": [
            []
        ]
    }
]